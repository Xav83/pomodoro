trigger:
- main

pool:
  vmImage: 'windows-2019'

jobs:
  - job: Formatting
    steps:
    - script: |
        pip install cmake-format
        npm install -g clang-format
      displayName: 'Installs Dependencies'
    - script: |
        make format
      displayName: 'Runs the formatting command'
    - script: |
        git diff --exit-code
      displayName: 'Verify that all the sources have already been formatted'
  - job: Pomodoro
    strategy:
      matrix:
        ubuntu_debug:
          imageName: 'ubuntu-18.04'
          generator: Unix Makefiles
          build_configuration: 'Debug'
        ubuntu_release:
          imageName: 'ubuntu-18.04'
          generator: Unix Makefiles
          build_configuration: 'Release'
        mac_debug:
          imageName: 'macOS-10.15'
          generator: Xcode
          build_configuration: 'Debug'
        mac_release:
          imageName: 'macOS-10.15'
          generator: Xcode
          build_configuration: 'Release'
        windows_debug:
          imageName: 'windows-2019'
          generator: Visual Studio 16 2019
          build_configuration: 'Debug'
        windows_release:
          imageName: 'windows-2019'
          generator: Visual Studio 16 2019
          build_configuration: 'Release'
    pool:
        vmImage: $(imageName)
    steps:
    - script: |
        choco install conan
        refreshenv
      displayName: 'Installs Dependencies'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Windows_NT'))
    - script: |
        pip3 install conan
      displayName: 'Installs Dependencies'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin'))
    - script: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 1
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 1
        sudo update-alternatives --set gcc "/usr/bin/gcc-10"
        sudo update-alternatives --set g++ "/usr/bin/g++-10"
        pip3 install pip --upgrade
        pip3 install setuptools
        pip3 install conan
      displayName: 'Installs Dependencies'
      condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        mkdir -p build
        cd build
        cmake .. -G "$(generator)" -DCMAKE_BUILD_TYPE=$(build_configuration)
      displayName: 'Generates the Solution'
    - script: |
        cd build
        cmake --build . --config $(build_configuration)
      displayName: 'Compiles the solution in $(build_configuration) Configuration'
